///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Imports
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const mongoose = require('mongoose');
const { isEmail } = require('validator'); 
const bcrypt = require('bcrypt');
const daySchema = require('./Day');


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Document Schema for MongoDB
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const userSchema = new mongoose.Schema({
    email: {
        type: String,
        required: [true, 'Email is required'],
        unique: true,
        lowercase: true,
        validate: [isEmail, 'Please enter a valid email']
    },
    username: {
        type: String,
        required: [true, 'Username is required'],
        unique: true,
        maxlength: [20, 'Username can only be up to 20 characters'],
    },
    password: {
        type: String,
        required: [true, 'password required'],
        minlength: [5, 'Password must be at least 5 characters'],
    },
    days: {
        type: [daySchema.schema],
        default: [],
        required: false
  }
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static methods
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

userSchema.statics.login = async function(username, password) {
    const user = await this.findOne({ username });
    if(user){
        const auth = await bcrypt.compare(password, user.password)
        if (auth) {
            return user;
        }
        throw Error('Incorrect password')
    }
    throw Error('Incorrect username')
}

userSchema.statics.findByUsername = async function(username) {
    return new Promise(async (resolve, reject) => {
        try {
            const user = Schema.User.findOne({ username: username });
            resolve(user);
        } catch (err) {
            reject(`User with username: ${username} not found`);
        }
    });
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mongoose Hooks
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

userSchema.pre('save', async function (next) {    
    const salt = await bcrypt.genSalt();
    this.password = await bcrypt.hash(this.password, salt);
    console.log('user about to be created & saved', this);  
    next(); // go to next middleware in stack
});

userSchema.post('save', function (doc, next){
    console.log('new user created and saved', doc);
    next(); // go to next middleware in stack
})


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Exports
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const User = mongoose.model('user', userSchema);

module.exports = User;